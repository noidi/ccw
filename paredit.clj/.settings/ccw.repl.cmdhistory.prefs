cmdhistory=["(nil? (\:tag {}))" "(sexp \\"(\\")" "(sexp \\"(())\\")" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Loading file test\\\\paredit\\\\tests.clj" ";; Switching to paredit.tests namespace" "(pts)" ";; Switching to paredit.tests namespace" "(pts)" ";; Loading file src\\\\net\\\\cgrand\\\\parsley\\\\fold.clj" ";; Switching to paredit.parser namespace" "(let [c (slurp \\"C\:\\\\\\\\Users\\\\\\\\Laurent\\\\\\\\Downloads\\\\\\\\1.3.0-alpha6\\\\\\\\src\\\\\\\\clj\\\\\\\\clojure\\\\\\\\core.clj\\")\\n      d (map \#(str % \\"\\\\n\\") (clojure.string/split-lines c))]\\n  (println \\"Executing full parser\:\\")\\n  (dotimes [_ 10] (time (sexp c)))\\n  (println \\"Executing parser incrementally\:\\")\\n  (dotimes [_ 10] (time (dser-ser-inc d)))\\n  (\= c (lu/node-text (dser-ser-inc d)) (lu/node-text (sexp c))))" ";; Loading file src\\\\net\\\\cgrand\\\\parsley\\\\fold.clj" "(let [c (slurp \\"C\:\\\\\\\\Users\\\\\\\\Laurent\\\\\\\\Downloads\\\\\\\\1.3.0-alpha6\\\\\\\\src\\\\\\\\clj\\\\\\\\clojure\\\\\\\\core.clj\\")\\n      d (map \#(str % \\"\\\\n\\") (clojure.string/split-lines c))]\\n  (println \\"Executing full parser\:\\")\\n  (dotimes [_ 10] (time (sexp c)))\\n  (println \\"Executing parser incrementally\:\\")\\n  (dotimes [_ 10] (time (dser-ser-inc d)))\\n  (\= c (lu/node-text (dser-ser-inc d)) (lu/node-text (sexp c))))" "(doc into)" "(doc into\!)" "(find-doc \\"transient\\")" "(show into)" "(source into)" ";; Loading file src\\\\net\\\\cgrand\\\\parsley\\\\fold.clj" ";; Loading file src\\\\paredit\\\\parser.clj" "(let [c (slurp \\"C\:\\\\\\\\Users\\\\\\\\Laurent\\\\\\\\Downloads\\\\\\\\1.3.0-alpha6\\\\\\\\src\\\\\\\\clj\\\\\\\\clojure\\\\\\\\core.clj\\")\\n      d (map \#(str % \\"\\\\n\\") (clojure.string/split-lines c))]\\n  (println \\"Executing full parser\:\\")\\n  (dotimes [_ 10] (time (sexp c)))\\n  (println \\"Executing parser incrementally\:\\")\\n  (dotimes [_ 10] (time (dser-ser-inc d)))\\n  (\= c (lu/node-text (dser-ser-inc d)) (lu/node-text (sexp c))))" ";; Loading file test\\\\paredit\\\\tests.clj" "(pts)" ";; Switching to paredit.tests namespace" "(pts)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Loading file test\\\\paredit\\\\tests.clj" ";; Loading file src\\\\paredit\\\\core.clj" ";; Loading file src\\\\paredit\\\\loc_utils.clj" ";; Loading file src\\\\paredit\\\\regex_utils.clj" ";; Loading file src\\\\paredit\\\\compile.clj" ";; Loading file src\\\\paredit\\\\core_commands.clj" ";; Loading file src\\\\paredit\\\\text_utils.clj" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"coucou\\")" "(sexp \\"(foo)\\")" "(vec 1 2)" "(vector 1 2)" "(sexp \\"(foo)\\")" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"(foo)\\")" "(doc doall)" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"lolo\\")" "(sexp \\"(((())))\\")" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (sexp \\"((foo))\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (sexp \\"((foo))\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"(lolo)\\")" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"(lolo)\\")" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"(lolo)\\")" "(pprint (sexp \\"(lolo)\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (sexp \\"(lolo)\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (sexp \\"(lolo)\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (sexp \\"(lolo)\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (sexp \\"(lolo)\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (sexp \\"(lolo)\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (sexp \\"(lolo)\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (\:tokens (sexp \\"(lolo)\\")))" "(pprint (\:tokens (sexp \\"(lolo \\\\\\"coucou\\\\\\")\\")))" "(sexp \\"(lolo \\\\\\"coucou\\\\\\")\\")" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(sexp \\"(lolo \\\\\\"coucou\\\\\\")\\")" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(sexp \\"(lolo \\\\\\"coucou\\\\\\")\\")" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(sexp \\"(lolo \\\\\\"coucou\\\\\\")\\")" "(\:tokens (sexp \\"(lolo \\\\\\"coucou\\\\\\")\\"))" "(pprint (\:tokens (sexp \\"(lolo \\\\\\"coucou\\\\\\")\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (\:tokens (sexp \\"(lolo \\\\\\"coucou\\\\\\")\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" "(token \:sym 5)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (\:tokens (sexp \\"(lolo \\\\\\"coucou\\\\\\")\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(sexp \\"coucou\\")" "(pprint (\:tokens (sexp \\"coucou\\")))" "(pprint (\:tokens (sexp \\"(coucou\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (\:tokens (sexp \\"(coucou\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (\:tokens (sexp \\"(coucou\\")))" "(doc last)" "(doc peek)" "(doc pop)" "(doc subvec)" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (\:tokens (sexp \\"(coucou\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (\:tokens (sexp \\"(coucou\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (\:tokens (sexp \\"(coucou\\")))" "(pprint (\:tokens (sexp \\"[coucou\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (\:tokens (sexp \\"[coucou \\\\o\\")))" "(pprint (\:tokens (sexp \\"[coucou \\\\\\\\o\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (\:tokens (sexp \\"[coucou \\\\\\\\o\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (\:tokens (sexp \\"[coucou \\\\\\\\o\\")))" "(pprint (\:tokens (sexp \\"456\\")))" "(pprint (\:tokens (sexp \\"456L\\")))" "(pprint (\:tokens (sexp \\"456M\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (\:tokens (sexp \\"456M\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (\:tokens (sexp \\"456M\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (\:tokens (sexp \\"(456M)\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (\:tokens (sexp \\"(([(\\r\\n     ())]))\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (\:tokens (sexp \\"(([(\\r\\n     ())]))\\")))" "(sexp \\"(([(\\r\\n     ())]))\\")" "(pprint (sexp \\"(([(\\r\\n     ())]))\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint (sexp \\"(([(\\r\\n     ())]))\\"))" "(pprint (\:tokens (sexp \\"(([(\\r\\n     ())]))\\")))" "(pprint (\:tokens (sexp \\"\\\\\\"lolo\\\\\\"\\")))" "(pprint (\:tokens (sexp \\"\\\\\\"lolo\\\\\\" \\\\\\"bisou\\\\\\"\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (\:tokens (sexp \\";oto\\")))" "(pprint (sexp \\";oto\\"))" "(pprint (\:tokens (sexp \\";oto\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (\:tokens (sexp \\";oto\\")))" "(pprint (sexp \\";oto\\"))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint (sexp \\";oto\\"))" "(pprint (\:tokens (sexp \\";oto\\")))" "(pprint (\:tokens (sexp \\"\#_oto\\")))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(sexp \\"o\\")" ";; Switching to paredit.parser namespace" "(edit-buffer nil 0 0 \\"toto\\")" "(-> (edit-buffer nil 0 0 \\"toto\\") buffer-parse-tree)" "(-> (edit-buffer nil 0 0 \\"toto\\") (edit-buffer 0 0 \\" \\") buffer-parse-tree)" "(-> (edit-buffer nil 0 0 \\"toto)\\") (edit-buffer 0 0 \\" \\") (edit-buffer 0 0 \\"(coucou\\") buffer-parse-tree)" "(-> (edit-buffer nil 0 0 \\"toto)\\") (edit-buffer 0 0 \\" \\") (edit-buffer 0 0 \\"(coucou\\") buffer-parse-tree \:tokens)" "(-> (edit-buffer nil 0 0 \\"toto\\") (edit-buffer 0 0 \\" \\") (edit-buffer 0 0 \\"(coucou\\") buffer-parse-tree \:tokens)" "(sexp \\"\\\\\\"\\\\\\\\\\\\\\"%s\\\\\\"\\")" "(sexp \\"(printf \\\\\\"(clojure.core/load \\\\\\\\\\\\\\"%s\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\" path)\\")" "(pprint (sexp \\"(printf \\\\\\"(clojure.core/load \\\\\\\\\\\\\\"%s\\\\\\\\\\\\\\")\\\\\\\\n\\\\\\" path)\\"))" "(.substring \\"abc\\" 0 1)" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"coucou\\")" "*1" "(*1 parse-tree-view)" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"coucou\\")" "(*1 parse-tree-view)" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"coucou\\")" "(*1 parse-tree-view)" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"coucou\\")" "(*1 parse-tree-view)" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"coucou\\")" "(*1 parse-tree-view)" ";; Loading file src\\\\paredit\\\\parser.clj" "(sexp \\"coucou\\")" "(*1 parse-tree-view)" "(\:tokens *1)" "(-> \\"coucou\\" sexp)" "(*1 parse-tree-view)" "(\:tokens *1\\n         )" "(-> \\"(defn {coucou})\\" sexp)" "(*1 parse-tree-view)" "(\:tokens *1\\n         )" ";; Loading file src\\\\paredit\\\\parser.clj" "(parse \\"lolo\\")" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" ";; Loading file src\\\\paredit\\\\parser.clj" "(parse \\"lolo\\")" ";; Loading file src\\\\paredit\\\\parser.clj" "(binding [*build-id* 0] (parse \\"lolo\\"))" "(edit-buffer nil 0 0 \\"lolo\\")" "(-> (edit-buffer nil 0 0 \\"lolo\\")\\n    (edit-buffer 0 0 \\"()\\"))" "(-> (edit-buffer nil 0 0 \\"lolo\\")\\n    (edit-buffer 0 0 \\"()\\")\\n    buffer-parse-tree)" "(let [b (-> (edit-buffer nil 0 0 \\"lolo\\")\\n          (edit-buffer 0 0 \\"()\\"))]\\n  (binding [*build-id* 0]\\n    (buffer-parse-tree b)))" "(let [b (-> (edit-buffer nil 0 0 \\"lolo\\")\\n          (edit-buffer 0 0 \\"()\\"))]\\n  (binding [*build-id* 0]\\n    (buffer-parse-tree b))\\n  (buffer-parse-tree b))" "(let [b (-> (edit-buffer nil 0 0 \\"lolo\\")\\n          (edit-buffer 0 0 \\"()\\"))]\\n  (binding [*build-id* 0]\\n    (buffer-parse-tree b))\\n  (let [b (-> b (edit-buffer 0 0 \\"[]\\"))]))" "(let [b (-> (edit-buffer nil 0 0 \\"lolo\\")\\n          (edit-buffer 0 0 \\"()\\"))]\\n  (binding [*build-id* 0]\\n    (buffer-parse-tree b))\\n  (let [b (-> b (edit-buffer 0 0 \\"[]\\"))]\\n    (binding [*build-id* 1]\\n      (buffer-parse-tree b))))" "(pprint (let [b (-> (edit-buffer nil 0 0 \\"lolo\\")\\n                  (edit-buffer 0 0 \\"()\\"))]\\n          (binding [*build-id* 0]\\n            (buffer-parse-tree b))\\n          (let [b (-> b (edit-buffer 0 0 \\"[]\\"))]\\n            (binding [*build-id* 1]\\n              (buffer-parse-tree b)))))" "(pprint (let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\")\\n                  (edit-buffer 4 0 \\"()\\"))]\\n          (binding [*build-id* 0]\\n            (buffer-parse-tree b))\\n          (let [b (-> b \\n                    (edit-buffer 0 0 \\"[]\\"))]\\n            (binding [*build-id* 1]\\n              (buffer-parse-tree b)))))" "(pprint (let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo lili\\")\\n                  (edit-buffer 4 0 \\"()\\")\\n                  (edit-buffer 0 0 \\" \\"))]\\n          (binding [*build-id* 0]\\n            (buffer-parse-tree b))\\n          (let [b (-> b \\n                    (edit-buffer 0 0 \\"[]\\"))]\\n            (binding [*build-id* 1]\\n              (buffer-parse-tree b)))))" "(pprint (let [b (-> nil \\n                  (edit-buffer 0 0 \\"(lolo lili)\\")\\n                  (edit-buffer 4 0 \\"(lulu)\\")\\n                  (edit-buffer 0 0 \\" \\"))]\\n          (binding [*build-id* 0]\\n            (buffer-parse-tree b))\\n          (let [b (-> b \\n                    (edit-buffer 0 0 \\"[lala]\\"))]\\n            (binding [*build-id* 1]\\n              (buffer-parse-tree b)))))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo \\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 0 0 \\"[lala]\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo lili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2))" ";; Loading file src\\\\paredit\\\\parser.clj" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  ((paredit.parser/parse-tree b) coarse-damage-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  ((paredit.parser/parse-tree b) coarse-damage-view))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  ((p/parse-tree b) coarse-damage-view))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 2] ((p/parse-tree b) coarse-damage-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 2] ((p/parse-tree b) coarse-damage-view)))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 1] ((p/parse-tree b) coarse-damage-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 1] ((p/parse-tree b) coarse-damage-view)))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  ((p/parse-tree b) coarse-damage-view))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 2] ((p/parse-tree b) coarse-damage-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 2] ((p/parse-tree b) coarse-damage-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 2] ((p/parse-tree b) coarse-damage-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 2] ((p/parse-tree b) coarse-damage-view)))" "(mapcat nil)" "(mapcat identity [nil nil])" ";; Loading file src\\\\paredit\\\\parser.clj" "(mapcat identity [nil nil])" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 2] ((p/parse-tree b) coarse-damage-view)))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 1] ((p/parse-tree b) coarse-damage-view)))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* 2] ((p/parse-tree b) coarse-damage-view)))" "(let [b (-> nil \\n                  (edit-buffer 0 0 \\"lolo\\\\nlili\\"))\\n              pt1 (binding [*build-id* 0]\\n                    (buffer-parse-tree b))\\n              b (-> b \\n                  (edit-buffer 1 0 \\"b\\"))\\n              pt2 (binding [*build-id* 1]\\n                    (buffer-parse-tree b))]\\n  (println \\"pt1\:\\")\\n  (pprint pt1)\\n  (println \\"pt2\:\\")\\n  (pprint pt2)\\n  (println \\"coarse damage view\:\\")\\n  (binding [*build-id* (\:build-id pt2)] ((p/parse-tree b) coarse-damage-view)))" "(doc parents\\n     \\n     )" "(doc clojure.zip/parents)" "(doc clojure.zip/parent\\n     )" "(doc find)" "(doc search)" "(find-doc \\"dich\\")" "(find-doc \\"search\\")" "(find-doc \\"bin\\")" "(find-doc \\"binar\\")" "(defn search \\n  \\"search by dichotomy on a vector. Returns the offset of the element, or nil if not found.\\n   f applied to the currently examined value must return 0 if the correct value is found, a negative number is the current value is less than the searched value,\\n     a positive number if the current value is more than the searched value.\\n   to be efficient, coll must be fast for `get and `count functions.\\"\\n  ([coll f] (search coll f 0 (count coll)))\\n  ([coll f x y]\\n    (cond\\n      (< y x)  nil\\n      (\= y x) (when (zero? (f (get coll x))) x)\\n      \:else   (let [pivot (rem (- y x) 2)\\n                    fv    (f (get coll pivot))]\\n                (cond\\n                  (zero? fv) pivot\\n                  (neg? fv) (recur coll f (inc pivot) y)\\n                  \:else     (recur coll f x (dec pivot)))))))" "(search [0 1 2 3 4 5] \#(\= % 3))" "(search [0 1 2 3 4 5] \#(- % 3))" "(defn search \\n  \\"search by dichotomy on a vector. Returns the offset of the element, or nil if not found.\\n   f applied to the currently examined value must return 0 if the correct value is found, a negative number is the current value is less than the searched value,\\n     a positive number if the current value is more than the searched value.\\n   to be efficient, coll must be fast for `get and `count functions.\\"\\n  ([coll f] (search coll f 0 (count coll)))\\n  ([coll f x y]\\n    (cond\\n      (< y x)  nil\\n      (\= y x) (when (zero? (f (get coll x))) x)\\n      \:else   (let [pivot (rem (- y x) 2)\\n                    fv    (f (get coll pivot))]\\n                (cond\\n                  (zero? fv) pivot\\n                  (pos? fv) (recur coll f (inc pivot) y)\\n                  \:else     (recur coll f x (dec pivot)))))))" "(search [0 1 2 3 4 5] \#(- % 3))" "(defn search \\n  \\"search by dichotomy on a vector. Returns the offset of the element, or nil if not found.\\n   f applied to the currently examined value must return 0 if the correct value is found, a negative number is the current value is less than the searched value,\\n     a positive number if the current value is more than the searched value.\\n   to be efficient, coll must be fast for `get and `count functions.\\"\\n  ([coll f] (search coll f 0 (count coll)))\\n  ([coll f x y]\\n    (cond\\n      (< y x)  nil\\n      (\= y x) (when (zero? (f (get coll x))) x)\\n      \:else   (let [pivot (quot (- y x) 2)\\n                    fv    (f (get coll pivot))]\\n                (cond\\n                  (zero? fv) pivot\\n                  (neg? fv) (recur coll f (inc pivot) y)\\n                  \:else     (recur coll f x (dec pivot)))))))" "(search [0 1 2 3 4 5] \#(- % 3))" "(search [0 1 2 3 4 5] \#(- 3 %))" "(search [0 1 2 3 4 5] \#(- % 1))" "(search [0 1 2 3 4 5] \#(- 1 %))" "(search [0 1 2 3 4 5] \#(- -1 %))" "(search [0 1 2 3 4 5] \#(- % -1))" "(search [[0 4] [4 10] [10 15]] (fn [[x y]] (cond (< 5 x) -1 (< y 5) 1 \:else 0)))" "(search [[0 4] [4 10] [10 15]] (fn [[x y]] (cond (< 5 4) -1 (< y 4) 1 \:else 0)))" "(search [[0 4] [4 10] [10 15]] (fn [[x y]] (cond (< 5 x) -1 (< y 4) 1 \:else 0)))" "(search [[0 4] [4 10] [10 15]] (fn [[x y]] (cond (< 4 x) -1 (< y 4) 1 \:else 0)))" "(search [[0 4] [4 4] [4 10] [10 15]] (fn [[x y]] (cond (< 4 x) -1 (< y 4) 1 \:else 0)))" "(find-doc \\"compar\\")" ";; Loading file src\\\\ccw\\\\editors\\\\clojure\\\\ClojureTopLevelFormsDamager.clj" ";; Loading file src\\\\paredit\\\\utils.clj" ";; Loading file src\\\\ccw\\\\editors\\\\clojure\\\\ClojureTopLevelFormsDamager.clj" ";; Loading file src\\\\paredit\\\\utils.clj" "(search [[0 4] [4 4] [4 10] [10 15]] (fn [[x y]] (cond (< 4 x) -1 (< y 4) 1 \:else 0)))" ";; Loading file src\\\\ccw\\\\editors\\\\clojure\\\\ClojureTopLevelFormsDamager.clj" "(defn parse-tree-get [parse-tree idx]\\r\\n  (let [offset ((\:content-cumulative-count parse-tree) idx)\\r\\n        length (\:count ((\:content parse-tree) idx))]\\r\\n    [offset (+ offset length)]))\\r\\n\\r\\n(defn parse-tree-count [parse-tree idx] (count (\:content parse-tree)))\\r\\n\\r\\n(defn parse-tree-content-range [parse-tree text-offset text-length]\\r\\n  (let [start-idx (bin-search [parse-tree-get parse-tree-count]\\r\\n                              parse-tree \\r\\n                              (partial range-contains-in-ex\\r\\n                                       text-offset))\\r\\n        stop-idx  (bin-search [parse-tree-get parse-tree-count]\\r\\n                              parse-tree \\r\\n                              (partial range-contains-ex-in \\r\\n                                       (+ text-offset \\r\\n                                          text-length)))]\\r\\n    [start-idx stop-idx]))\\n" ";; Loading file src\\\\paredit\\\\utils.clj" ";; Switching to paredit.utils namespace" "(defn parse-tree-get [parse-tree idx]\\r\\n  (let [offset ((\:content-cumulative-count parse-tree) idx)\\r\\n        length (\:count ((\:content parse-tree) idx))]\\r\\n    [offset (+ offset length)]))\\r\\n\\r\\n(defn parse-tree-count [parse-tree idx] (count (\:content parse-tree)))\\r\\n\\r\\n(defn parse-tree-content-range [parse-tree text-offset text-length]\\r\\n  (let [start-idx (bin-search [parse-tree-get parse-tree-count]\\r\\n                              parse-tree \\r\\n                              (partial range-contains-in-ex\\r\\n                                       text-offset))\\r\\n        stop-idx  (bin-search [parse-tree-get parse-tree-count]\\r\\n                              parse-tree \\r\\n                              (partial range-contains-ex-in \\r\\n                                       (+ text-offset \\r\\n                                          text-length)))]\\r\\n    [start-idx stop-idx]))" "(parse-tree-content-range\\n  {\:content {\:count 5},\\n   \:content-cumulative-count [0]}\\n  0 5)" "(parse-tree-content-range\\n  {\:content [{\:count 5}],\\n   \:content-cumulative-count [0]}\\n  0 5)" "(parse-tree-get {\:content [{\:count 5}],\\n                 \:content-cumulative-count [0]}\\n                0)" "(parse-tree-get {\:content [{\:count 5} {\:count 3}],\\n                 \:content-cumulative-count [0 5]}\\n                0)" "(parse-tree-get {\:content [{\:count 5} {\:count 3}],\\n                 \:content-cumulative-count [0 5]}\\n                1)" "(parse-tree-count {\:content [{\:count 5} {\:count 3}],\\n                 \:content-cumulative-count [0 5]})" "(defn parse-tree-count [parse-tree] (count (\:content parse-tree)))" "(parse-tree-count {\:content [{\:count 5} {\:count 3}],\\n                 \:content-cumulative-count [0 5]})" "(parse-tree-content-range\\n  {\:content [{\:count 5}],\\n   \:content-cumulative-count [0]}\\n  0 5)" "(parse-tree-get {\:content [{\:count 5} {\:count 3}],\\n                 \:content-cumulative-count [0 5]}\\n                1)" "(def pt {\:content [{\:count 5} {\:count 3}],\\n         \:content-cumulative-count [0 5]})" "pt" "(parse-tree-get pt 1)" "(parse-tree-count pt)" "(parse-tree-content-range pt 0 3)" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       2))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       2))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       2))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       1))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       0))" "pt" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       0))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       2))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       5))" "p" "pt" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       6\\n                                       ))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       7\\n                                       ))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       2\\n                                       ))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       2\\n                                       ))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       2\\n                                       ))" "pt" ";; Loading file src\\\\paredit\\\\utils.clj" ";; Switching to paredit.utils namespace" "pt" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       2\\n                                       ))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       1))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       1))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       3))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       4))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       5))" "pt" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       5)\\n                              )" "pt" "{\:content [{\:count 5} {\:count 3}], \:content-cumulative-count [0 4]}" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       5)\\n                              )" "{\:content [{\:count 5} {\:count 3}], \:content-cumulative-count [0 5]}" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-in-ex\\r\\n                                       6))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       6))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       2))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       2))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       6))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       6))" "{\:content [{\:count 1} {\:count 1}\\n           {\:count 1} {\:count 1}\\n           {\:count 1} {\:count 1}\\n           {\:count 1} {\:count 1}\\n           {\:count 1}],\\n \:content-cumulative-count [0 1\\n                            2 3\\n                            4 5\\n                            6 7\\n                            8]}" "(def pt {\:content [{\:count 1} {\:count 1}\\n                   {\:count 1} {\:count 1}\\n                   {\:count 1} {\:count 1}\\n                   {\:count 1} {\:count 1}\\n                   {\:count 1}],\\n         \:content-cumulative-count [0 1\\n                                    2 3\\n                                    4 5\\n                                    6 7\\n                                    8]})" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       6))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       1))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       2))" "(def pt {\:content [{\:count 1} {\:count 1}\\n                   {\:count 1} {\:count 1}\\n                   {\:count 1} {\:count 1}\\n                   {\:count 2} {\:count 1}\\n                   {\:count 1}],\\n         \:content-cumulative-count [0 1 2 3 4 5 6 8 9]})" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       7))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       7))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       6))" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       7))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       7))" ";; Loading file src\\\\paredit\\\\utils.clj" "(bin-search [parse-tree-get parse-tree-count]\\r\\n                              pt \\r\\n                              (partial range-contains-ex-in\\r\\n                                       7))" ";; Loading file src\\\\ccw\\\\editors\\\\clojure\\\\ClojureTopLevelFormsDamager.clj" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(sexp \\"toto\\")" "(sexp \\"toto\\" p/parse-tree)" "((sexp \\"toto\\") p-t-v)" "((sexp \\"toto\\") parse-tree-view)" "(parse \\"toto\\")" "(pprint (parse \\"toto\\"))" "(pprint (parse \\"\#()\\"))" "(-> nil (edit-buffer 0 0 \\"\#()\\") p/parse-tree parse-tree-view)" "(-> nil (edit-buffer 0 0 \\"\#()\\") p/parse-tree (parse-tree-view 1))" "(-> nil (edit-buffer 0 0 \\"\#()\\") p/parse-tree (apply parse-tree-view))" "(-> nil (edit-buffer 0 0 \\"\#()\\") p/parse-tree (apply [parse-tree-view]))" "(binding [*build-id* 0] (-> nil (edit-buffer 0 0 \\"\#()\\") p/parse-tree (apply [parse-tree-view])))" "(binding [*build-id* 0] (-> nil (edit-buffer 0 0 \\"\#()\\") p/parse-tree (apply [parse-tree-view]) pprint))" "(delay 3)" "(def d (delay (println \\"forced\!\\") 3))" "d" "(def d (delay (println \\"forced\!\\") 3))" "(def e (delay (println \\"forced\!\\") 3))" "(\= d e)" "(\= @d @e)" "(def d (delay (println \\"forced\!\\") 3))" "(type d)" "(find-doc \\"delay\\")" "(delay? d)" "(find-doc \\"forc\\")" "(find-doc \\"forced\\")" "(doc force)" "(force 4)" "(force d)" "(def d (delay 1))" "(def e (delay 1))" "d" "e" "(\= d e)" "(\= @d @e\\n   )" "(\#{\:a} \:b \:c)" "(get \#{\:a} \:b \:c)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" " ((lolo))" " (parse \\"((lolo))\\")" "5.q" "((\:abstract-node (parse \\"((lolo))\\")) parse-tree-view)" "((\:abstract-node (parse \\"((lolo))\\")) tokens-view)" "((\:abstract-node (parse \\"lolo\\")) tokens-view)" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"lolo\\")) parse-tree-view)))" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"(lolo)\\")) parse-tree-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"(lolo)\\")) parse-tree-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"(lolo)\\")) parse-tree-view)))" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"lolo\\")) parse-tree-view)))" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"lolo lili\\")) parse-tree-view)))" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"lolo)\\")) parse-tree-view)))" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"(lolo)\\")) parse-tree-view)))" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"()\\")) parse-tree-view)))" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"(a)\\")) parse-tree-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"(a)\\")) parse-tree-view)))" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"(()a)\\")) parse-tree-view)))" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"((a))\\")) parse-tree-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"((a))\\")) parse-tree-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"((a))\\")) parse-tree-view)))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(mapcat \#((\:abstract-node %) paredit.parser/tokens-view) (\:content ((\:abstract-node (parse \\"((a))\\")) parse-tree-view)))" "(\\n  + 1 2)" "(def a {\:id 1 \:c [{\:id 2} {\:id 3 \:c [{\:id 4}]}]})" "a" "(pprint a)" "(require '[clojure.zip \:as zip])" "(def make-zipper (partial zip/zipper (constantly true) \:c \#(assoc %1 \:c (vec %2))))" "(def z (make-zipper a))" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while \#(not (zip/end? %)) (iterate zip/next z))]\\n    n-seq))" "(rmv a 2)" "(count(rmv a 2))" "(pprint a)" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while \#(not (zip/end? %)) (iterate zip/next z))]\\n    (if-let [loc (some \#(\= k (\:id (zip/node %))) n-seq)]\\n      (zip/root (zip/edit loc dissoc k))\\n      a)))" "(rmv a 1)" "(-> a make-zipper zip/next zip/node \:id)" "(require '[clojure.zip \:as zip])" "(def make-zipper (partial zip/zipper (constantly true) \:c \#(assoc %1 \:c (vec %2))))" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while \#(not (zip/end? %)) (iterate zip/next z))]\\n    (if-let [loc (some \#(\= k (\:id (zip/node %))) n-seq)]\\n      (zip/root (zip/edit loc dissoc k))\\n      a)))" "(rmv a 4)" "(doc some)" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while \#(not (zip/end? %)) (iterate zip/next z))]\\n    (if-let [loc (first (take-while \#(not\= k (\:id (zip/node %))) n-seq))]\\n      (zip/root (zip/edit loc dissoc k))\\n      a)))" "(rmv a 3)" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while \#(not (zip/end? %)) (iterate zip/next z))]\\n    (if-let [loc (first (take-while \#(not\= k (\:id (zip/node %))) n-seq))]\\n      (zip/root (zip/remove loc))\\n      a)))" "(rmv a 3)" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while \#(not (zip/end? %)) (iterate zip/next z))]\\n    (if-let [loc (first (drop-while \#(not\= k (\:id (zip/node %))) n-seq))]\\n      (zip/root (zip/remove loc))\\n      a)))" "(rmv a 3)" "a" "(rmv a 4)" "(require '[clojure.zip \:as zip])" "(def make-zipper (partial zip/zipper (constantly true) \:c \#(assoc %1 \:c (vec %2))))" "(def a {\:id 1 \:c [{\:id 2} {\:id 3 \:c [{\:id 4}]}]})" "(def make-zipper (partial zip/zipper (constantly true) \:c \#(assoc %1 \:c (vec %2))))" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while \#(not (zip/end? %)) (iterate zip/next z))]\\n    (if-let [loc (first (drop-while \#(not\= k (\:id (zip/node %))) n-seq))]\\n      (zip/root (zip/remove loc))\\n      a)))" "(rmv a 3)" "(rmv a 1)" "(rmv a 4)" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while \#(not (zip/end? %)) (iterate zip/next z))]\\n    (if-let [loc (first (drop-while \#(not\= k (\:id (zip/node %))) n-seq))]\\n      (if (\= a (zip/node loc))\\n        a\\n        (zip/root (zip/remove loc)))\\n      a)))" "a" "(rmv a 1)" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while \#(not (zip/end? %)) (iterate zip/next z))]\\n    (if-let [loc (first (drop-while \#(not\= k (\:id (zip/node %))) n-seq))]\\n      (when (not\= a (zip/node loc))\\n        (zip/root (zip/remove loc)))\\n      a)))" "(rmv a 1)" "(rmv a 4)" "(rmv a 3)" "(defn rmv [a k]\\n  (let [z (make-zipper a)\\n        n-seq (take-while (complement zip/end?) (iterate zip/next z))]\\n    (if-let [loc (first (drop-while \#(not\= k (\:id (zip/node %))) n-seq))]\\n      (when (not\= a (zip/node loc))\\n        (zip/root (zip/remove loc)))\\n      a)))" "(rmv a 3)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(parse \\"coucou\\")" "(pprint (parse \\"coucou\\"))" "((\:abstract-node (parse \\"coucou\\")) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((\:abstract-node (parse \\"coucou\\")) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((\:abstract-node (parse \\"coucou\\")) tokens-view)" ";; Switching to paredit.parser namespace" "((\:abstract-node (parse \\"\\")) tokens-view)" "((\:abstract-node (parse \\"a\\")) tokens-view)" "(vec (list 1 2))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((\:abstract-node (parse \\"a\\")) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((\:abstract-node (parse \\"a\\")) tokens-view)" "((\:abstract-node (parse \\"[[a] b]\\")) tokens-view)" "((\:abstract-node (parse \\"[[a b] c]\\")) tokens-view)" ";; Switching to paredit.parser namespace" "((\:abstract-node (parse \\"a\\")) parse-tree-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((\:abstract-node (parse \\"a\\")) parse-tree-view)" "((\:abstract-node (parse \\"a\\")) tokens-view)" "((\:abstract-node (parse \\"(a)\\")) tokens-view)" "(pprint ((\:abstract-node (parse \\"(a)\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"((a))\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Loading file src\\\\ccw\\\\editors\\\\clojure\\\\PareditAutoEditStrategy.clj" ";; Loading file src\\\\ccw\\\\editors\\\\clojure\\\\ClojureTopLevelFormsDamager.clj" ";; Loading file src\\\\paredit\\\\loc_utils.clj" ";; Loading file src\\\\paredit\\\\utils.clj" ";; Loading file src\\\\paredit\\\\core.clj" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"(b)\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"(b)\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"(b)\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"(a b)\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" "(vec nil)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'paredit.parser)))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'paredit.parser)))" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"((a b) c)\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"((a b) c)\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"b\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"a b\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"(a )b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"(a )b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"(a )b\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" "(get (list 0 1) 0)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "(pprint ((\:abstract-node (parse \\"^a b\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"^ a b\\")) tokens-view))" "(pprint ((\:abstract-node (parse \\"^ a b\\")) parse-tree-view))" "^ {\:tag 1} {}" "(meta ^ {\:tag 1} {})" ";; Loading file src\\\\paredit\\\\core.clj" ";; Loading file src\\\\paredit\\\\parser.clj" "\#(% \:foo)" "(map \#(% \:foo) [identity])" "(map (fn f [b] (b \:foo)) [identity])" "(map (fn f [b] (b f)) [(fn [x] x)])" "(map (fn f [b] (b f)) [(fn [x] x)(fn [x] x)(fn [x] x)])" "(ns student.dialect (\:require [clojure.string \:as str]))\\r\\n(defn germanize\\r\\n  [sentence]\\r\\n  (def german-letters {\\"a\\" \\"\u00E4\\" \\"u\\" \\"\u00FC\\" \\"o\\" \\"\u00F6\\" \\"ss\\" \\"\u00DF\\"})\\r\\n  (doseq [[original-letter new-letter] german-letters]\\r\\n    (str/replace sentence original-letter new-letter)))" "(defn germanize [sentence]\\n  (apply str (map \#((fnil german-letters %) %) sentence)))" "(germanize \\"gross u\\")" "ger" "german-letters" "(def german-letters {\\"a\\" \\"\u00E4\\" \\"u\\" \\"\u00FC\\" \\"o\\" \\"\u00F6\\" \\"ss\\" \\"\u00DF\\"})" "(defn germanize [sentence]\\n  (apply str (map \#((fnil german-letters %) %) sentence)))" "(germanize \\"gross u\\")" "(defn germanize [sentence]\\n  (apply str (map \#(get german-letters % %) sentence)))" "(germanize \\"gross u\\")" "german-letters" "(defn germanize [sentence]\\n  (apply str (map \#(german-letters % %) sentence)))" "(germanize \\"u\\")" "(german-letters \\"u\\")" "(german-letters \\\\u)" "(defn germanize [sentence]\\n  (apply str (map \#((fnil german-letters (str %)) %) sentence)))" "(germanize \\"u\\")" "(german-letters \\\\u)" "(defn germanize [sentence]\\n  (apply str (map \#(german-letters (str %) %) sentence)))" "(germanize \\"u\\")" "(germanize \\"ss\\")" "(doc merge)" "(merge \#{\:a} {\:b})" "(require '[clojure.set \:as s])" "(s/project \#{\:a \:b} \:c)" "(s/project \#{{\:id 1 \:a 2}} \#{\:id})" "(s/project \#{{\:id 1 \:a 2} \#{\:id 2 \:b 4}} \#{\:id})" "(s/project \#{{\:id 1 \:a 2} {\:id 2 \:b 4}} \#{\:id})" "(s/project \#{{\:id 1 \:a 2} {\:id 2 \:b 4} {\:b 5}} \#{\:id})" "(s/join \#{{\:i 1}} \#{\:i 2})" "(s/join \#{{\:i 1}} \#{{\:i 2}})" "(s/join \#{{\:i 1}} \#{{\:i 1}})" "(s/join \#{{\:i 1}} \#{{\:i 1 \:b 4} } \#{\:i})" "(s/join \#{{\:i 1}} \#{{\:i 1 \:b 4} } \#{\:i \:i})" "(s/join \#{{\:i 1}} \#{{\:i 1 \:b 4} } {\:i \:i})" "(s/join \#{{\:i 1}} \#{{\:i 1 \:b 4} } )" "(s/join \#{{\:i 1 \:k 9}} \#{{\:i 1 \:b 4} } )" "(s/join \#{{\:i 1 \:k 9}} \#{{\:i 1 \:b 4} {\:b 5 \:e 6}} )" "(s/join \#{{\:i 1 \:k 9} {\:b 5 \:s 5}} \#{{\:i 1 \:b 4} {\:b 5 \:e 6}} )" "(use 'clojure.set)" "ys" "hs" "ys" "(def ys \#{{\:a 11 \:b 11 \:c 11 \:e 5}\\r\\n         {\:a 12 \:b 11 \:c 12 \:e 3}\\r\\n         {\:a 3 \:b 3 \:c 3 \:e 7 }})" "ys" "(pprint ys)" "(index ys [\:b])" "(index ys [\:b \:a])" "(index ys [\:b \:a \:j])" "(defn germanize [sentence]\\n  (apply str (map \#(german-letters % %) sentence)))" "(def substitutions-set \#{ \#{\\\\a \\\\n} \#{\\\\b \\\\o} \#{\\\\c \\\\p}\#{\\\\d \\\\q}\\n                          \#{\\\\e \\\\r} \#{\\\\f  \\\\s} \#{\\\\g \\\\t}\#{\\\\h \\\\u}\\n                          \#{\\\\i \\\\v} \#{\\\\j \\\\w} \#{\\\\l \\\\x} \#{\\\\l \\\\y}\\n                          \#{\\\\m \\\\z}})" "(def substitutions (reduce (fn [s [x y]] (assoc s x y y x)) {} substitution-set))" "(def substitutions (reduce (fn [s [x y]] (assoc s x y y x)) {} substitutions-set))" "(def substitutions (reduce (fn [s su] (let [[x y] (seq su)] (assoc s x y y x))) {} substitutions-set))" "substitutions" "(defn rot13 [s]\\n  (apply str (map substitutions s)))" "(rot13 \\"Vs lbh obgurerq qrpvcurevat guvf gura cyrnfr ercyl jvgu j00g\\")" "(def substitutions (reduce (fn [s su] (let [[x y] (seq su)] (assoc s x y y x))) {} substitutions-set))" "(parse \\"coucou\\")" "(parse \\"^foo bar\\")" "((-> (parse \\"^foo bar\\") \:abstract-node) tokens-view)" "((-> (parse \\"^{\:foo \:bar} bar\\") \:abstract-node) tokens-view)" "(doc peek)" "(doc pop)" ";; Switching to paredit.parser namespace" "((-> (parse \\" \\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\\\\\" \\") \:abstract-node) tokens-view)" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\\\\\"\\") \:abstract-node) tokens-view)" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node))" "(parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\")" "(parse \\"(\\")" "((-> (parse \\"(\\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" "(parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\")" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" "(pts)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" "((-> (parse \\";salut\\") \:abstract-node) tokens-view)" "((-> (parse \\";salut\\\\r\\\\nlolo\\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((-> (parse \\";salut\\\\r\\\\nlolo\\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((-> (parse \\";salut\\\\r\\\\nlolo\\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((-> (parse \\";salut\\\\r\\\\nlolo\\") \:abstract-node) tokens-view)" "((-> (parse \\";salut\\\\r\\\\n\\") \:abstract-node) tokens-view)" "((-> (parse \\";salut\\\\n\\") \:abstract-node) tokens-view)" "((-> (parse \\";salut\\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Switching to paredit.parser namespace" "((-> (parse \\";salut\\") \:abstract-node) tokens-view)" "((-> (parse \\";salut\\\\n\\") \:abstract-node) tokens-view)" "((-> (parse \\";salut\\\\r\\\\n\\\\n\\") \:abstract-node) tokens-view)" "((-> (parse \\";salut\\\\n\\") \:abstract-node) tokens-view)" ";; Loading file src\\\\paredit\\\\parser.clj" "((-> (parse \\"\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" "((-> (parse \\"\#\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\\\\\\\\\\\\\" \\") \:abstract-node) tokens-view)" "((-> (parse \\"\#\\\\\\"hello\\\\\\\\\\\\\\"bad boy\\n \\") \:abstract-node) tokens-view)" "((-> (parse \\"\#\\\\\\"hello boy\\n \\") \:abstract-node) tokens-view)" "((-> (parse \\"'\\") \:abstract-node) tokens-view)" "((-> (parse \\"^\\") \:abstract-node) tokens-view)" "((-> (parse \\"\#^\\") \:abstract-node) tokens-view)" "((-> (parse \\"\#\\") \:abstract-node) tokens-view)" "((-> (parse \\"\#'\\") \:abstract-node) tokens-view)" ";; Loading file test\\\\paredit\\\\tests.clj" ";; Switching to paredit.tests namespace" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" ";; Switching to paredit.core-commands namespace" ";; Switching to paredit.tests namespace" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\parser.clj" "(pts)" "(parse \\"\\\\\\"foo\\\\\\"\\")" "(parse \\"(foo)\\")" ";; Loading file src\\\\paredit\\\\parser.clj" "(parse \\"\\\\\\"foo\\\\\\"\\")" ";; Loading file src\\\\paredit\\\\parser.clj" "(pts)" ";; Loading file src\\\\paredit\\\\parser.clj" "(doc assoc-in)" "(doc assoc)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\parser.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(parse \\"\\\\\\"hello kitty\\\\\\"\\")" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file test\\\\paredit\\\\tests.clj" ";; Switching to paredit.tests namespace" "(pts\\n  )" ";; Switching to paredit.tests namespace" "(pts\\n  )" ";; Loading file src\\\\paredit\\\\parser.clj" "(pts\\n  )" ";; Loading file src\\\\paredit\\\\core.clj" "(pts\\n  )" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core_commands.clj" "(pts)" ";; Loading file src\\\\paredit\\\\core.clj" "(pts)" ";; Loading file src\\\\paredit\\\\parser.clj" "(pts)" ";; Loading file src\\\\paredit\\\\parser.clj" "(def edges {\:a \#{b}, \:b \#{c, d}, \:c \#{e}, \:d \#{e}})" "(def edges {\:a \#{\:b}, \:b \#{\:c, \:d}, \:c \#{\:e}, \:d \#{\:e}})" "(pts)" "(def thread (agent \\"Thread\\"))\\r\\n(def account (ref 1000))\\r\\n(send thread\\r\\n      (fn [agt aref] (dosync (alter aref + 100) (Thread/sleep 8000) agt))\\r\\n      account)\\r\\n(time (dosync (ref-set account 2000)))" ";; 10 seconds later \:" "@account" "(def b (p/incremental-buffer sexp))" "(def b1 (p/edit b 0 0 \\"(ns lpok)\\r\\n  []\\r\\n\\r\\n\\r\\n\\r\\n(defn greet\\r\\n)\\r\\n(defn greet\\r\\n  []\\r\\n  (println \\"))" "b1" "(def b2 (p/edit b1) 39 29 \\"\\")" "(def b2 (p/edit b1 39 29 \\"\\"))" "(def b (p/incremental-buffer sexp))" "(def b1 (p/edit b 0 0 \\"(ns lpok)\\r\\n  []\\r\\n\\r\\n\\r\\n\\r\\n(defn greet\\r\\n)\\r\\n(defn greet\\r\\n  []\\r\\n  (println \\"))" "(def b2 (p/edit b1 39 29 \\"\\"))" "(def b (p/incremental-buffer sexp))" "(def b1 (p/edit b 0 0 (str \\"(ns lpok)\\" \\\\return \\\\newline \\n                           \\"  []\\" \\\\return \\\\newline\\r\\n                           \\\\return \\\\newline\\n                           \\\\return \\\\newline\\n                           \\\\return \\\\newline\\n                           \\"(defn greet\\" \\\\return \\\\newline \\")\\" \\\\return \\\\newline \\\\return \\\\newline \\"(defn greet\\" \\\\return \\\\newline \\\\return \\\\newline \\"  []\\" \\\\return \\\\newline \\n                           \\"  (println \\")))" "(def b2 (p/edit b1 39 29 \\"\\"))" "(def b1 (p/edit b 0 0 (str \\"(ns lpok)\\" \\\\return \\\\newline \\n                           \\"  []\\" \\n                           \\\\return \\\\newline\\r\\n                           \\\\return \\\\newline\\n                           \\\\return \\\\newline\\n                           \\\\return \\\\newline\\n                           \\"(defn greet\\" \\n                           \\\\return \\\\newline \\n                           \\")\\" \\n                           \\\\return \\\\newline \\n                           \\"(defn greet\\" \\n                           \\\\return \\\\newline \\n                           \\"  []\\" \\n                           \\\\return \\\\newline \\n                           \\"  (println \\")))" "(def b2 (p/edit b1 39 29 \\"\\"))" "(def b3 (p/edit b2 0 0 (str \\"(defn greet\\" \\\\return \\\\newline \\"  []\\" \\\\return \\\\newline \\"  (println\\")))" "(def b4 (p/edit b3 58 0 \\"m\\"))" "(def b1 (p/edit b 0 0 (str \\"(ns lpok)\\" \\\\newline \\n                           \\"  []\\"  \\\\newline\\r\\n                            \\\\newline\\n                            \\\\newline\\n                            \\\\newline\\n                           \\"(defn greet\\"  \\\\newline \\")\\" \\\\newline  \\\\newline \\"(defn greet\\"  \\\\newline  \\\\newline \\"  []\\"  \\\\newline \\n                           \\"  (println \\")))" "(def b2 (p/edit b1 33 28 \\"\\"))" "(def b3 (p/edit b2 0 0 (str \\"(defn greet\\" \\\\newline \\"  []\\" \\\\newline \\"  (println\\")))" "(def b4 (p/edit b3 58 0 \\"m\\"))" "(lu/node-text b3)" "(def b2 (p/edit b1 33 28 \\"\\"))" "(lu/node-text b2)" "(lu/node-text (buffer-parse-tree b3 0))" "\\"(defn greet\\\\n  []\\\\n  (println(ns lpok)\\\\n  []\\\\n\\\\n\\\\n\\\\n(defn greet\\\\n)\\\\n\\\\n \\"\\r\\n" "(def b4 (p/edit b3 0 51 \\"\\"))" "(lu/node-text (buffer-parse-tree b4 0))" "(def b4 (p/edit b3 0 57 \\"\\"))" "(lu/node-text (buffer-parse-tree b4 0))" "(def b4 (p/edit b3 0 61 \\"\\"))" "(lu/node-text (buffer-parse-tree b4 0))" "(def b5 (p/edit b4 0 0 \\"coucou\\"))" "(def b (p/incremental-buffer sexp))" "(def b1 (p/edit b 0 0 (str \\"(ns lpok)\\" \\\\return \\\\newline \\n                           \\"  []\\" \\n                           \\\\return \\\\newline\\r\\n                           \\\\return \\\\newline\\n                           \\\\return \\\\newline\\n                           \\\\return \\\\newline\\n                           \\"(defn greet\\" \\n                           \\\\return \\\\newline \\n                           \\")\\" \\n                           \\\\return \\\\newline \\n                           \\"(defn greet\\" \\n                           \\\\return \\\\newline \\n                           \\"  []\\" \\n                           \\\\return \\\\newline \\n                           \\"  (println \\")))" "(def b2 (p/edit b1 39 29 \\"\\"))" "(def b3 (p/edit b2 0 0 (str \\"(defn greet\\" \\\\return \\\\newline \\"  []\\" \\\\return \\\\newline \\"  (println\\")))" "(def b4 (p/edit b3 58 0 \\"m\\"))" "(lu/node-text (buffer-parse-tree b 0))" "(require '[paredit.loc-utils \:as lu])" "(lu/node-text (buffer-parse-tree b 0))" "(lu/node-text (buffer-parse-tree b1 0))" "(lu/node-text (buffer-parse-tree b2 0))" "(lu/node-text (buffer-parse-tree b3 0))" "(lu/node-text (buffer-parse-tree b4 0))" "(def b (p/incremental-buffer sexp))" "(def b1 (p/edit b 0 0 (str \\"(ns lpok)\\"  \\\\newline \\n                           \\"  []\\" \\n                            \\\\newline\\r\\n                            \\\\newline\\n                            \\\\newline\\n                            \\\\newline\\n                           \\"(defn greet\\" \\n                            \\\\newline \\n                           \\")\\" \\n                            \\\\newline \\n                           \\"(defn greet\\" \\n                            \\\\newline \\n                           \\"  []\\" \\n                            \\\\newline \\n                           \\"  (println \\")))" "(def b2 (p/edit b1 32 27 \\"\\"))" "(def b3 (p/edit b2 0 0 (str \\"(defn greet\\"  \\\\newline \\"  []\\"  \\\\newline \\"  (println\\")))" "(def b4 (p/edit b3 51 0 \\"m\\"))" "(pts)" ";; Loading file test\\\\paredit\\\\tests.clj" ";; Switching to paredit.tests namespace" "(pts)" ";; Loading file src\\\\paredit\\\\parser.clj" ";; Loading file test\\\\paredit\\\\tests.clj" "(pts)" "(sexp \\"({)]\\")" "((sexp \\"({)]\\") \:parse-tree)" "((sexp \\"({)]\\") parse-tree-view)" ";; Switching to paredit.parser namespace" "((sexp \\"({)]\\") parse-tree-view)" "(binding [*build-id* 10] ((sexp \\"({)]\\") parse-tree-view))" "(pprint (binding [*build-id* 10] ((sexp \\"({)]\\") parse-tree-view)))" ";; Switching to paredit.tests namespace" "(pts)" ";; Switching to paredit.tests namespace" "(pts)" "(start-spy)" "(pts)" "(sexp \\")s\\")" ";; Switching to paredit.parser namespace" "(def s (p/parser {\:root-tag \:root \:main \:expr} \:expr- \#{\:list} \:list [\\"(\\" \:expr* \\")\\"]))" "(s \\"()\\")" "(s \\")\\")" "(s \\"])\\")" "(s \\"))\\")" "(s \\")sd\\")" "(s \\"sd\\")" "(sexp \\"jj\\")" "(sexp \\")\\")" "(sexp \\")]\\")" "(sexp \\"])\\")" "(sexp \\")s\\")" "(def s (p/parser {\:root-tag \:root \:main \:expr} \:expr- \#{\:list \:atom} \:list [\\"(\\" \:expr* \\")\\"] \:atom \\"s\\"))" "(def s (p/parser {\:root-tag \:root \:main \:expr} \:expr- \#{\:list \:atom} \:list [\\"(\\" \:expr* \\")\\"] \:atom \\"a\\"))" "(s \\"(a)\\")" "(s \\")\\")" "(s \\")a\\")" "(s \\")b\\")" "(def s (p/parser {\:main \:expr} \:expr- \#{\:list \:atom} \:list [\\"(\\" \:expr* \\")\\"] \:atom \\"a\\"))" "(s \\")a\\")" "(def s (p/parser {\:main \:expr}\\n                 \:expr- \#{\:list \:atom}\\n                 \:list [\\"(\\" \:expr* \\")\\"] \\n                 \:atom \\"a\\"))" "(s \\"(a)\\")" "(s \\"(b)\\")" "(s \\")\\")" "(s \\")b\\")" "(s \\")a\\")" "(def s (p/parser {\:main \:expr*}\\n                 \:expr- \#{\:list \:atom}\\n                 \:list [\\"(\\" \:expr* \\")\\"] \\n                 \:atom \\"a\\"))" "(s \\")a\\")" "(pts)" "(doc future)" "(require 'clojure.repl)" "(use 'clojure.repl)" "(doc future)" "(doc deref)" "(doc realized?)" "(+ 1 2)" "(pts)" "1" "2" "(+ 1 2)" "(+ 2 1)" "(+ 1 2)"]
eclipse.preferences.version=1
